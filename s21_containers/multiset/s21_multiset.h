/**
 * @brief Класс Multiset (мультимножество) представляет собой ассоциативный
 * контейнер, аналогичный множеству, но разрешающий хранение одинаковых
 * элементов.
 *
 * Мультимножество подобно множеству в том смысле, что элементы автоматически
 * сортируются по возрастанию при добавлении. Однако в отличие от множества,
 * мультимножество допускает наличие одинаковых элементов. Это означает, что
 * в мультимножестве можно хранить неуникальные значения.
 *
 * Как и множество, мультимножество не позволяет обращаться к элементам по
 * индексу и требует доступа по значению. Поскольку элементы хранятся в
 * отсортированном порядке, это обеспечивает быстрый доступ к элементам и
 * эффективные операции поиска.
 *
 * @tparam T Тип элементов, хранимых в мультимножестве.
 */

#ifndef CPP2_S21_CONTAINERS_SRC_S21_CONTAINERS_MULTISET_S21_MULTISET_H_
#define CPP2_S21_CONTAINERS_SRC_S21_CONTAINERS_MULTISET_S21_MULTISET_H_

#include "../set/s21_set.h"
#include "../tree/redblacktree.h"
#include "../vector/s21_vector.h"

namespace s21 {
template <typename Key, typename Compare = std::less<Key>>
class multiset : public set<Key, Compare> {
 public:
  using value_type = Key;
  using const_iterator = typename RedBlackTree<Key, Compare>::ConstIterator;
  using iterator = typename RedBlackTree<Key, Compare>::Iterator;
  using size_type = std::size_t;

  /**
   * @brief Конструктор класса Multiset.
   *
   * Этот конструктор инициализирует объект класса Multiset, создавая пустое
   * мультимножество. Он вызывает конструктор базового класса Set для этой цели.
   */
  multiset() : set<Key, Compare>() {}

  /**
   * @brief Конструктор класса Multiset с использованием инициализирующего
   * списка.
   *
   * Этот конструктор инициализирует объект класса Multiset с элементами из
   * инициализирующего списка. Он принимает список элементов типа `Key` и
   * вставляет каждый элемент в мультимножество. В результате создается
   * мультимножество, содержащее элементы из инициализирующего списка.
   *
   * @param items Инициализирующий список элементов типа `Key`.
   */
  explicit multiset(std::initializer_list<Key> const& items)
      : set<Key, Compare>() {
    for (const auto& item : items) {
      this->tree_.insert_mult(item);
    }
  }

  /**
   * @brief Конструктор копирования класса Multiset.
   *
   * Этот конструктор создает копию мультимножества `ms` и инициализирует
   * текущий объект с этой копией. Копирование включает в себя создание копии
   * дерева элементов. Служит для создания глубокой копии мультимножества.
   *
   * @param ms Константная ссылка на мультимножество, которое нужно скопировать.
   */
  multiset(const multiset<Key, Compare>& ms) : set<Key, Compare>() {
    for (const_iterator it = ms.begin(); it != ms.end(); ++it) {
      this->tree_.insert_mult(*it);
    }
  }

  /**
   * @brief Конструктор перемещения класса Multiset.
   *
   * Этот конструктор перемещает мультимножество `ms` в текущий объект,
   * используя операцию перемещения для дерева элементов. Это позволяет
   * эффективно перенести ресурсы из одного мультимножества в другое.
   *
   * @param ms R-значение мультимножества для перемещения.
   */
  multiset(multiset&& ms) : set<Key, Compare>() {
    this->tree_ = std::move(ms.tree_);
  };

  /**
   * @brief Деструктор класса Multiset.
   *
   * Деструктор уничтожает объект класса Multiset. В данной реализации,
   * деструктор не выполняет дополнительных операций, так как управление
   * ресурсами и памятью обрабатывается внутри базового класса Set (или его
   * родительских классов).
   */
  ~multiset() {}

  /**
   * @brief Получение итератора, указывающего на начало мультимножества.
   *
   * Эта функция возвращает итератор, который указывает на первый элемент в
   * мультимножестве. Используйте этот итератор для обозначения начала диапазона
   * при итерации по мультимножеству.
   *
   * @return Итератор, указывающий на начало мультимножества.
   */
  iterator begin() { return this->tree_.begin(); }

  /**
   * @brief Получение итератора, указывающего на конец мультимножества.
   *
   * Эта функция возвращает итератор, который указывает на позицию после
   * последнего элемента в мультимножестве. Используйте этот итератор для
   * обозначения конца диапазона при итерации по мультимножеству.
   *
   * @return Итератор, указывающий на конец мультимножества.
   */
  iterator end() { return this->tree_.end(); }

  /**
   * @brief Получение константного итератора, указывающего на начало
   * мультимножества.
   *
   * Эта функция возвращает константный итератор, который указывает на первый
   * элемент в мультимножестве. Используйте этот итератор для обозначения начала
   * диапазона при итерации по мультимножеству.
   *
   * @return Константный итератор, указывающий на начало мультимножества.
   */
  const_iterator begin() const { return this->tree_.cbegin(); }

  /**
   * @brief Получение константного итератора, указывающего на конец
   * мультимножества.
   *
   * Эта функция возвращает константный итератор, который указывает на позицию
   * после последнего элемента в мультимножестве. Используйте этот итератор для
   * обозначения конца диапазона при итерации по мультимножеству.
   *
   * @return Константный итератор, указывающий на конец мультимножества.
   */
  const_iterator end() const { return this->tree_.cend(); }

  /**
   * @brief Оператор присваивания перемещения для класса Multiset.
   *
   * Этот оператор присваивания перемещает мультимножество `other` в текущий
   * объект, используя операцию перемещения для дерева элементов. Это позволяет
   * эффективно перенести ресурсы из одного мультимножества в другое.
   *
   * @param other R-значение мультимножества для перемещения.
   * @return Ссылка на текущий объект после присваивания.
   */
  multiset& operator=(multiset&& other) {
    if (this != &other) {
      this->tree_ = std::move(other.tree_);
    }
    return *this;
  }

  /**
   * @brief Вставляет элемент `value` в мультимножество.
   *
   * Эта функция вставляет элемент `value` в мультимножество. В мультимножестве
   * допускаются повторяющиеся элементы. Функция возвращает пару, в которой
   * первый элемент - итератор на вставленный элемент, а второй элемент
   * указывает, был ли элемент успешно вставлен.
   *
   * @param value Константная ссылка на значение, которое нужно вставить.
   * @return Пара, содержащая итератор на вставленный элемент и флаг успешной
   *         вставки.
   */
  std::pair<iterator, bool> insert(const value_type& value) {
    auto result = this->tree_.insert_mult(value);
    return {iterator(result.first), true};
  }

  /**
   * @brief Объединяет мультимножество `other` с текущим мультимножеством.
   *
   * Эта функция объединяет мультимножество `other` с текущим мультимножеством,
   * вставляя все элементы из `other` в текущее мультимножество. После
   * объединения, мультимножество `other` очищается, становясь пустым.
   *
   * @param other Ссылка на мультимножество, которое нужно объединить.
   */
  void merge(multiset& other) {
    for (const auto& value : other) {
      this->tree_.insert_mult(value);
    }
    other.clear();
  }

  /**
   * @brief Возвращает количество элементов в мультимножестве с заданным ключом.
   *
   * Эта функция возвращает количество элементов в мультимножестве, которые
   * имеют ключ, совпадающий с заданным ключом `key`.
   *
   * @param key Ключ, с которым сравниваются элементы.
   * @return Количество элементов с заданным ключом.
   */
  size_type count(const Key& key) const {
    return std::count_if(begin(), end(),
                         [&key](const Key& item) { return item == key; });
  }
  // size_type count(const Key& key) const {
  //   size_type count = 0;
  //   for (const auto& value : *this) {
  //     if (value == key) ++count;
  //   }
  //   return count;
  // }

  /**
   * @brief Возвращает итератор на первый элемент, не меньший заданного ключа.
   *
   * Эта функция возвращает итератор на первый элемент в мультимножестве,
   * который не меньше заданного ключа `key`. Она использует внутреннюю функцию
   * `find` для выполнения операции поиска итератора.
   *
   * @param key Ключ, с которым сравниваются элементы.
   * @return Итератор на первый элемент, не меньший ключа `key`.
   */
  iterator lower_bound(const Key& key) { return this->tree_.find(key); }

  /**
   * @brief Возвращает итератор на первый элемент, строго больший заданного
   * ключа.
   *
   * Эта функция возвращает итератор на первый элемент в мультимножестве,
   * который строго больше заданного ключа `key`. Она сначала использует функцию
   * `lower_bound` для поиска итератора на первый элемент, равный `key`, а затем
   * инкрементирует его до тех пор, пока элементы не станут больше `key`.
   *
   * @param key Ключ, с которым сравниваются элементы.
   * @return Итератор на первый элемент, строго больший ключа `key`.
   */
  iterator upper_bound(const Key& key) {
    iterator result = lower_bound(key);
    while (result != end() && (*result == key)) ++result;
    return result;
  }

  /**
   * @brief Возвращает диапазон элементов с ключами, эквивалентными заданному
   * ключу.
   *
   * Эта функция возвращает пару итераторов, которая обозначает диапазон
   * элементов в мультимножестве, ключи которых эквивалентны заданному ключу
   * `key`. Для этого она сначала использует функцию `lower_bound` для поиска
   * итератора на первый элемент, не меньший `key`, а затем использует функцию
   * `upper_bound` для поиска итератора на первый элемент, строго больший `key`.
   * Пара итераторов обозначает диапазон между этими двумя позициями.
   *
   * @param key Ключ, с которым сравниваются элементы.
   * @return Пара итераторов, обозначающая диапазон элементов с эквивалентными
   * ключами.
   */
  std::pair<iterator, iterator> equal_range(const value_type& key) {
    return {lower_bound(key), upper_bound(key)};
  }

  /**
   * @brief Вставляет несколько элементов в мультимножество.
   *
   * Эта функция позволяет вставить несколько элементов сразу в мультимножество.
   * Она принимает переменное число аргументов `args` для вставки. Для каждого
   * аргумента, функция возвращает пару, в которой первый элемент - итератор на
   * вставленный элемент, а второй элемент указывает, был ли элемент успешно
   * вставлен.
   *
   * @param args Переменное число аргументов, представляющих элементы для
   * вставки.
   * @return Вектор пар, содержащих итераторы на вставленные элементы и флаги
   * успешной вставки.
   */
  template <typename... Args>
  std::vector<std::pair<iterator, bool>> insert_many(Args&&... args) {
    std::vector<std::pair<iterator, bool>> results;
    (results.push_back(insert(std::forward<Args>(args))), ...);
    return results;
  }
};

}  // namespace s21
#endif  // CPP2_S21_CONTAINERS_SRC_S21_CONTAINERS_MULTISET_S21_MULTISET_H_